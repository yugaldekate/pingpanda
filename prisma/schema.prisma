// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

model User {
  id         String  @id @default(cuid())
  externalId String? @unique

  plan       Plan @default(FREE)
  quotaLimit Int

  discordId String?
  email     String  @unique
  apiKey    String  @unique @default(cuid())

  EventCategories EventCategory[]
  Event           Event[]
  Quota           Quota[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, apiKey])
}

model EventCategory {
  id String @id @default(cuid())

  name  String
  color Int
  emoji String?

  Event Event[]
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId])
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}

model Event {
  id String @id @default(cuid())

  formattedMessage String

  name   String
  fields Json

  deliveryStatus DeliveryStatus @default(PENDING)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventCategoryId String?
  EventCategory   EventCategory? @relation(fields: [eventCategoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
}

model Quota {
  id String @id @default(cuid())

  year  Int
  month Int
  count Int @default(0)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
}
